#!/usr/bin/env python3
import json
import logging
import pathlib
import os
import re
import sys
import subprocess

logger = logging.getLogger()

# pythonPath = '/usr/local/bin/python3'   # if python isn't in PATH
pythonPath = 'python3'
zabbix_server = '127.0.0.1'
hostPath = 'host'
# hostPath = r'/usr/bin/host'             # if host isn't in PATH

dnsWait = '3'  # each dns query will take no more than one second (multiple DNS servers ARE processed)

pathlib.Path(__file__).parent.resolve()
dnscheck_send = os.path.join(pathlib.Path(__file__).parent.resolve(), 'dnscheck_send')

hostdns = sys.argv[2]
hosthost = sys.argv[3]

ptrCheck = sys.argv[4]
IPv6Check = sys.argv[5]
mxCheck = sys.argv[6]
txtCheck = sys.argv[7]

name_server = ''
if len(sys.argv) > 8:
    name_server = ' ' + sys.argv[8]

jsonData = []
senderData = []

if re.search('^\d+\.\d+\.\d+\.\d+$', hostdns):
    print(sys.argv[0] + ": IP addresses are not supported as main input, a DNS name must be provided.")
    sys.exit(1)

hostOut = subprocess.getoutput(hostPath + ' -W ' + dnsWait + ' ' + hostdns + name_server)
ipv4Re = re.findall(r' has address (.+)$', hostOut, re.I | re.M)
ipv4Re.sort()  # prevent ips mess up on each query
error = 'no'

if ipv4Re:
    for num4, ip4 in enumerate(ipv4Re, start=1):
        num4 = str(num4)
        jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV4NUM}': num4, '{#IPV4ADDR}': ip4})
        senderData.append('"' + hosthost + '" dnscheck.ipv4[' + hostdns + ',' + num4 + '] "' + ip4 + '"')

        if ptrCheck == 'ptrYES':
            hostPtr4Out = subprocess.getoutput(hostPath + ' -W ' + dnsWait + ' ' + ip4 + name_server)

            ptr4Re = re.findall(' domain name pointer (.+)$', hostPtr4Out, re.I | re.M)

            if ptr4Re:
                for i in ptr4Re:
                    jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR4NUM}': num4})
                    senderData.append('"' + hosthost + '" dnscheck.ptr4[' + hostdns + ',' + num4 + '] "' + i + '"')

                if len(ptr4Re) > 1:  # if more than one PTR per IP were found
                    jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR4NUM}': num4})
                    senderData.append('"' + hosthost + '" dnscheck.ptr4[' + hostdns + ',' + num4 + '] "MULTIPTR"')

            elif hostPtr4Out.find('no servers could be reached') != -1:
                jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR4NUM}': num4})
                senderData.append('"' + hosthost + '" dnscheck.ptr4[' + hostdns + ',' + num4 + '] "TIMEOUT"')

            else:
                jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR4NUM}': num4})
                senderData.append('"' + hosthost + '" dnscheck.ptr4[' + hostdns + ',' + num4 + '] "NOPTR"')

elif hostOut.find('no servers could be reached') != -1:
    jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV4NUM}': '1'})
    senderData.append('"' + hosthost + '" dnscheck.ipv4[' + hostdns + ',1] "TIMEOUT"')

    error = 'yes'  # do not process any other entry on error

elif hostdns == '':
    jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV4NUM}': '1'})
    senderData.append('"' + hosthost + '" dnscheck.ipv4[' + hostdns + ',1] "NODNS"')

    error = 'yes'

else:
    jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV4NUM}': '1'})
    senderData.append('"' + hosthost + '" dnscheck.ipv4[' + hostdns + ',1] "NOIPV4"')

if (IPv6Check == 'ipv6YES' or IPv6Check == 'ipv6MAY') and error == 'no':
    ipv6Re = re.findall(' has IPv6 address (.+)$', hostOut, re.I | re.M)
    ipv6Re.sort()

    if ipv6Re:
        for num6, ip6 in enumerate(ipv6Re, start=1):
            num6 = str(num6)
            jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV6NUM}': num6, '{#IPV6ADDR}': ip6})
            senderData.append('"' + hosthost + '" dnscheck.ipv6[' + hostdns + ',' + num6 + '] "' + ip6 + '"')

            if ptrCheck == 'ptrYES':
                hostPtr6Out = subprocess.getoutput(hostPath + ' -W ' + dnsWait + ' ' + ip6 + name_server)

                ptr6Re = re.findall(' domain name pointer (.+)$', hostPtr6Out, re.I | re.M)

                if ptr6Re:
                    for i in ptr6Re:
                        jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR6NUM}': num6})
                        senderData.append('"' + hosthost + '" dnscheck.ptr6[' + hostdns + ',' + num6 + '] "' + i + '"')

                    if len(ptr6Re) > 1:  # if more than one PTR per IP were found
                        jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR6NUM}': num6})
                        senderData.append('"' + hosthost + '" dnscheck.ptr6[' + hostdns + ',' + num6 + '] "MULTIPTR"')

                elif hostPtr6Out.find('no servers could be reached') != -1:
                    jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR6NUM}': num6})
                    senderData.append('"' + hosthost + '" dnscheck.ptr6[' + hostdns + ',' + num6 + '] "TIMEOUT"')

                else:
                    jsonData.append({'{#HOSTDNS}': hostdns, '{#PTR6NUM}': num6})
                    senderData.append('"' + hosthost + '" dnscheck.ptr6[' + hostdns + ',' + num6 + '] "NOPTR"')

    elif hostOut.find('no servers could be reached') != -1 and IPv6Check != 'ipv6MAY':
        jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV6NUM}': '1'})
        senderData.append('"' + hosthost + '" dnscheck.ipv6[' + hostdns + ', 1] "TIMEOUT"')
    elif IPv6Check != 'ipv6MAY':
        jsonData.append({'{#HOSTDNS}': hostdns, '{#IPV6NUM}': '1'})
        senderData.append('"' + hosthost + '" dnscheck.ipv6[' + hostdns + ',1] "NOIPV6"')

if mxCheck == 'mxYES' and error == 'no':
    mxRe = re.findall(r' mail is handled by\s+(\d+)\s+(.+)$', hostOut, re.I | re.M)
    mxRe.sort()

    if mxRe:
        for numMX, (valMXpri, valMX) in enumerate(mxRe, start=1):
            numMX = str(numMX)
            jsonData.append({'{#HOSTDNS}': hostdns, '{#MXNUM}': numMX})
            senderData.append('"' + hosthost + '" dnscheck.mx[' + hostdns + ',' + numMX + '] "' + valMX + '"')
            jsonData.append({'{#HOSTDNS}': hostdns, '{#MXPRINUM}': numMX})
            senderData.append('"' + hosthost + '" dnscheck.mxpri[' + hostdns + ',' + numMX + '] "' + valMXpri + '"')

    elif hostOut.find('no servers could be reached') != -1:
        jsonData.append({'{#HOSTDNS}': hosthost, '{#MXNUM}': '1'})
        senderData.append('"' + hosthost + '" dnscheck.mx[1] "TIMEOUT"')
        # jsonData.append({'{#HOSTNAME}':hosthost, '{#MXPRINUM}':'1'})   # priority is not gathered when no MX is present
        # senderData.append('"' + hosthost + '" dnscheck.mxpri[1] "TIMEOUT"')

    else:
        jsonData.append({'{#HOSTDNS}': hosthost, '{#MXNUM}': '1'})
        senderData.append('"' + hosthost + '" dnscheck.mx[' + hostdns + ',1] "NOMX"')
        # jsonData.append({'{#HOSTDNS}':hostdns, '{#MXPRINUM}':'1'})
        # senderData.append('"' + hosthost + '" dnscheck.mxpri[1] "NOMX"')

if txtCheck == 'txtYES' and error == 'no':
    txtOut = subprocess.getoutput(hostPath + ' -W ' + dnsWait + ' -t txt ' + hostdns + name_server)

    txtRe = re.findall(' descriptive text (.+)$', txtOut, re.I | re.M)
    txtRe.sort()

    if txtRe:
        for numTxt, valTxt in enumerate(txtRe, start=1):
            if not re.search('^".+"$', valTxt):  # if value is not encased in quotes
                valTxt = '"' + valTxt + '"'

            numTxt = str(numTxt)
            jsonData.append({'{#HOSTDNS}': hostdns, '{#TXTNUM}': numTxt})
            senderData.append('"' + hosthost + '" dnscheck.txt[' + hostdns + ',' + numTxt + '] ' + valTxt)

    elif hostOut.find('no servers could be reached') != -1:
        jsonData.append({'{#HOSTDNS}': hostdns, '{#TXTNUM}': '1'})
        senderData.append('"' + hosthost + '" dnscheck.txt[' + hostdns + ',1] "TIMEOUT"')

    else:
        jsonData.append({'{#HOSTDNS}': hostdns, '{#TXTNUM}': '1'})
        senderData.append('"' + hosthost + '" dnscheck.txt[' + hostdns + ',1] "NOTXT"')

print(json.dumps({"data": jsonData}, indent=4))  # print json for LLD
senderDataNStr = '\n'.join(senderData)  # items for zabbix sender separated by newlines

# send data for discovered items to zabbix
if sys.argv[1] == 'send':
    # spawn new process and regain shell control immediately
    subprocess.Popen([pythonPath, dnscheck_send, 'send', zabbix_server, senderDataNStr], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                     stdin=subprocess.PIPE)
elif sys.argv[1] == 'send_verbose':
    # do not detach if in verbose mode, also skips timeout in dnscheck-send.py
    subprocess.Popen(
        [pythonPath, dnscheck_send, 'send_verbose', zabbix_server, senderDataNStr])
else:
    print(sys.argv[0] + ": Not supported. Use 'semd' or 'send_verbose'.")
    sys.exit(1)
